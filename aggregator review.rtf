{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 I've completed the blog aggregator project. I am really happy to finally learn how to implement a SQL db after many years. Thank you for teaching me. I feel like I'm almost a real programmer now. \
\
Here\'92s some unsolicited feedback about the project. \
\
I know there was previously a "build a social media backend" project that combined the learn web servers course and this project. I can understand why it would be best to split the concepts. \
\
"Learn Web Servers" was hard enough on its own. And read/writing to a json file was a great primer on how DBs work. However, it seems like learn web servers benefitted most from the split while this project suffers from a lack of sufficient difficulty. \
\
The previous guided projects were all challenging in a manner that stimulated growth (except build a dev env, which is understandably easier since it's first). It seems like the pattern for these projects is to use the concepts which the previous courses teach, while adding technologies to increase the difficulty and provide an element of the unknown, in such a manner that you aren't explaining every detail. This project doesn't seem to execute that pattern as well as the previous guided projects. \
\
I don't think this blog aggregator is sufficiently challenging. Besides adding a DB into the mix, it's practically the same thing as the learn web servers chirpy project, albeit smaller/simpler. Here\'92s the one piece of feedback I think is most important: once one gets the goose migration and sqlc code generation commands to work, it\'92s smooth sailing. \
\
I am not suggesting it needs to re-review the concepts covered by Learn Web Servers. While my inexperience limits my imagination for what technology/feature could be added to the aggregator, I'm sure you guys can come up with something that would make this project even more educational. \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Previous projects implemented caching, tkinter, auth, etc. What is some dumbed-down real world feature that could be added as an internal package? Any sort of B2B or B2C tools? Some DSA use case or other optimization? How about some sort of WAL (to simulate PG\'92s WAL)? Some way to implement one of the lessons learned in this video about gitlab deleting the prod DB?\
https://www.youtube.com/watch?v=tLdRBsuvVKc\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
https://www.youtube.com/watch?v=rWrhE_02EsI\
Here is an example (one that is irrelevant to this project): message queues. This interview Lane did about message queues is fabulous. It really highlights the interesting complexities of the backend and Lane\'92s depth of knowledge. I enjoyed this conversation about a production backend feature more than some backend banter episodes, despite the interviewer\'92s monotone demeanor. \
\
Personal note: It\'92s super easy to google RSS feeds to test the server on. However, personally, I didn\'92t feel comfortable just blasting some random person\'92s RSS site for testing, so I only used boot.dev\'92s and Lane\'92s blogs. I don\'92t know if there are other people like me, but if there are, it might be good to have links to RSS feeds that can be used for testing. IDK /shrug}